<Template output='./app/model'>
/*
 * @Author: 灰白 
 * @Date: 2017-09-07 12:03:58 
 * @Last Modified by: 灰白
 * @Last Modified time: 2017-09-07 16:44:23
 */
{{#const foreignKeys=[] }}
module.exports = app => {
  const sequelize = app.Sequelize;
  const entity = {
    {{#columns.forEach(function(column,index){  }}
        {{camelCase(column.name)}}: {
            type: sequelize.{{column.CodeType}},
            allowNull: {{column.allowNull}},
            field:'{{column.name}}',
            {{column.defaultValue==null?"":"defaultValue:"+column.defaultValue+","}}
            {{column.primaryKey?"primaryKey:"+column.primaryKey+",":""}}
            {{column.autoIncrement?"autoIncrement:"+column.autoIncrement:""}}
            {{#if(column.foreignKey){ foreignKeys.push(column.foreignKey);}}
             // references: {
                  // 引用另一个模型
                  //model: app.model.{{column.foreignKey['target_table']}},
                  // 连接模型的列表
                  //key: '{{column.foreignKey['target_column']}}',
                  // 强制使用外键约束，仅适用于 PostgreSQL
                  //deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE
                //}
            {{# } }}
        }{{index==(columns.length-1)?'':','}}
      {{# }); }} 
  }
  const {{M_tableName}} = app.model.define('{{M_tableName}}', entity, {
    tableName: '{{tableName}}'
  });
  {{#if(foreignKeys.length==2){
    let target_table=[camelCase(foreignKeys[0]['target_table'],1),camelCase(foreignKeys[1]['target_table'],1)];
    let field=[foreignKeys[0]['source_column'],foreignKeys[1]['source_column']];
  }}
  {{M_tableName}}.associate=()=>{
      app.model.{{target_table[0]}}.belongsToMany(app.model.{{target_table[1]}},{foreignKey:'{{ field[0] }}',through:'{{ tableName }}' });
      app.model.{{target_table[1]}}.belongsToMany(app.model.{{target_table[0]}},{foreignKey:'{{ field[1] }}',through:'{{ tableName }}' });
  }
  {{# } }}
  {{M_tableName}}.getModel=model=>{
							if(typeof model!=="object"){
								throw new  Error("请求参数错误");
								return false;
							  }
							let newobj={};
							for (var key in model) {
								if (entity.hasOwnProperty(key)) {
									newobj[key]=model[key];
								}
							}
						  return newobj;
						}
  return {{M_tableName}};
};
</Template>